<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
	    http://www.springframework.org/schema/beans
	    http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		">
    <!--1.自动扫描所有子包中的注解 -->
    <context:component-scan base-package="com.insistla"/>
    <!--2.开启注解驱动-->
    <mvc:annotation-driven/>

    <!--3.把对静态资源访问请求映射到DefaultServletHttpRequestHandler上-->
    <mvc:default-servlet-handler />

    <!--5.加载db.properties和redis.properties文件-->
    <context:property-placeholder location="classpath*:*.properties"></context:property-placeholder>

    <!--6.缓存配置-->
    <!--6.1连接池配置 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 最大连接数 -->
        <property name="maxTotal" value="${redis.maxTotal}" />
        <!-- 最大空闲连接数 -->
        <property name="maxIdle" value="${redis.maxIdles}" />
        <!-- 每次释放连接的最大数目 -->
        <property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}" />
        <!-- 释放连接的扫描间隔（毫秒） -->
        <property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}" />
        <!-- 连接最小空闲时间 -->
        <property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}" />
        <!-- 连接空闲多久后释放, 当空闲时间>该值 且 空闲连接>最大空闲连接数 时直接释放 -->
        <property name="softMinEvictableIdleTimeMillis" value="${redis.softMinEvictableIdleTimeMillis}" />
        <!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 -->
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
        <!-- 在获取连接的时候检查有效性, 默认false -->
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
        <!-- 在空闲时检查有效性, 默认false -->
        <property name="testWhileIdle" value="${redis.testWhileIdle}" />
        <!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true -->
        <property name="blockWhenExhausted" value="${redis.blockWhenExhausted}" />
    </bean>
    <!--6.2.jedis客户端单机版-->
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool" destroy-method="destroy"  depends-on="jedisPoolConfig">
        <!-- 加载jedisPool配置信息 -->
        <constructor-arg name="poolConfig" ref="jedisPoolConfig" />
        <!--服务器或虚拟机IP地址-->
        <constructor-arg name="host" value="${redis.hostName}"></constructor-arg>
        <!--Redis端口号-->
        <constructor-arg name="port" value="${redis.port}"></constructor-arg>
        <!--Redis配置密码(配置密码后必须配置连接超时，否则报错)-->
        <constructor-arg name="password" value="${redis.password}"></constructor-arg>
        <!--连接超时-->
        <constructor-arg name="timeout" value="${redis.timeout}"/>
    </bean>
    <!--7.配置数据源：C3P0或druid-->
    <!--C3P0配置方式-->
    <!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${db.driver}"></property>
        <property name="jdbcUrl" value="${db.url}"></property>
        <property name="user" value="${db.user}"></property>
        <property name="password" value="${db.pwd}"></property>
        <property name="initialPoolSize" value="${db.initialPoolSize}"></property>
        <property name="maxPoolSize" value="${db.maxPoolSize}"></property>
    </bean>-->
    <!--7.druid配置方式(推荐)-->
    <!--BasicDataSource提供了close()方法关闭数据源，所以必须设定destroy-method=”close”属性， 
    以便Spring容器关闭时，数据源能够正常关闭；销毁方法调用close(),是将连接关闭，并不是真正的把资源销毁。
    还可以理解成:
    当数据库连接不使用的时候,就把该连接重新放到数据池中,方便下次使用调用.
    -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="driverClassName" value="${db.driver}"></property>
        <property name="url" value="${db.url}"></property>
        <property name="username" value="${db.user}"></property>
        <property name="password" value="${db.pwd}"></property>
        <property name="maxActive" value="${db.maxPoolSize}" />
        <property name="minIdle" value="${db.minIdle}" />
    </bean>

    <!--8.配置SqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--引入数据源-->
        <property name="dataSource" ref="dataSource"></property>
        <!--加载mybatis核心配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!--加载所有映射文件-->
        <property name="mapperLocations" value="classpath:com/insistla/ssm/mapping/*.xml"></property>
        <!--typeAliasesPackage对应实体类所在的包，这个时候会自动取包名作为别名-->
        <property name="typeAliasesPackage" value="com.insistla.ssm.pojo"></property>
    </bean>

    <!--9.配置Dao层：spring注入这个bean-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--将sqlSessionFactory注入com.insistla.ssm.dao包的类中，dao包中的类直接使用sqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <property name="basePackage" value="com.insistla.ssm.dao"></property>
    </bean>

    <!--10.事务管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!--10.1开启事务注解，标注@Transactional的类和方法将具有事务性 -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!--文件上传-->





</beans>